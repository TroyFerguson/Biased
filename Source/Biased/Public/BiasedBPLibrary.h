// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "Engine.h"
#include "BiasedBPLibrary.generated.h"

DECLARE_LOG_CATEGORY_EXTERN(BiasedLog, Log, All);

typedef TPair<FDieFace, int32> FDieFaceAlias;

/**
* Data structure describing the face of a biased die. The value is the result if the die lands
* on this face and the probability is the likely hood of this face being rolled
*/
USTRUCT(BlueprintType)
struct FDieFace 
{
	GENERATED_BODY()

	FDieFace() {}

	FDieFace(const FDieFace& DieFace) : Value(DieFace.Value), Probability(DieFace.Probability) {}

	FDieFace(int32 InValue, float InProbability) : Value(InValue), Probability(InProbability) {}

	/**
	* The result if the die lands on this face
	*/
	UPROPERTY(BlueprintReadWrite)
	int32 Value;

	/**
	* The probability of this face being rolled
	*/
	UPROPERTY(BlueprintReadWrite)
	float Probability;
};

/**
* Data structure that holds preprocessed data describing a biased die, which can be used to roll 
* biased dice in constant time.
*/
USTRUCT(BlueprintType)
struct FBiasedDieData
{
	GENERATED_BODY()

	//operator[]
	const FDieFaceAlias& operator[] (int32 Index) const
	{
		return ProbablilityPairs[Index];
	}

	//NumFaces()
	int NumFaces() const
	{
		return ProbablilityPairs.Num();
	}

	//IsValid()
	bool IsValid() const
	{
		return bIsValid;
	}

private:
	friend class UBiasedBPLibrary;
	
	/**
	* Adds an alias to the die data
	*
	* @Param	DieFace	The face that this alias rolls against
	* @Param	Alias	The other value of the alias
	*/
	void AddDieFaceAlias(FDieFace DieFace, int32 Alias)
	{
		ProbablilityPairs.Push(FDieFaceAlias(TPairInitializer<FDieFace, int32>(DieFace, Alias)));
	}

	/**
	* Invalidates the biased die data structure, marking it unusable
	*/
	void Invalidate()
	{
		bIsValid = false;
		ProbablilityPairs.Empty();
	}

	/**
	* Validates the biased die data structure, marking it usable
	*/
	void Validate()
	{
		bIsValid = true;
	}

	//List of aliases for die faces
	TArray< FDieFaceAlias > ProbablilityPairs;

	bool bIsValid;

};

/* 
*	Function library class.
*	
*/
UCLASS()
class UBiasedBPLibrary : public UBlueprintFunctionLibrary
{
	GENERATED_UCLASS_BODY()

	/**
	* Preprocesses a list of die faces and generates data in a format that allows for constant 
	* time generation of biased die rolls of the die.
	*
	* The sum of the probability of the die faces should be equal to 1 for the generation to 
	* be successful.
	*
	* @param Faces List of die faces you want to prepare for rolling.
	* @param OutBiasedDieData Out Parameter. The preprocessed die data that is ready to be rolled.
	* @return Whether the preparation of the data was successful or not.
	*/
	UFUNCTION(BlueprintCallable, meta = (DisplayName = "Generate Data For Biased Die Rolls", Keywords = "biased generate die"), Category = "Biased")
	static bool GenerateBiasedDieData(const TArray<FDieFace>& Faces, FBiasedDieData& OutBiasedDieData);

	/**
	* Roll a biased die
	*
	* @param BiasedDieData The die data generated by GenerateBiasedDieData for the die you wish to roll.
	* @return The result of the die roll.
	*/
	UFUNCTION(BlueprintCallable, meta = (DisplayName = "Roll Biased Die", Keywords = "biased roll die"), Category = "Biased")
	static int32 RollBiasedDie(const FBiasedDieData& BiasedDieData);

	/**
	* Roll a biased die using a random stream
	*
	* @param BiasedDieData The die data generated by GenerateBiasedDieData for the die you wish to roll.
	* @param RandomStream The random stream to generate random numbers from
	* @return The result of the die roll.
	*/
	UFUNCTION(BlueprintCallable, meta = (DisplayName = "Roll Biased Die From Stream", Keywords = "biased roll die stream"), Category = "Biased")
	static int32 RollBiasedDieFromStream(const FBiasedDieData& BiasedDieData, const FRandomStream& RandomStream);

	/**
	* Adjust the tolerance of the error checking when determining whether or not there is an issue with the die faces
	*
	* @param NewTolerance The new tolerance to check with. Should be a reasonably small value.
	*/
	UFUNCTION(BlueprintCallable, meta = (DisplayName = "Adjust error checking tolerance", Keywords = "tolerance"), Category = "Biased")
	static void AdjustErrorCheckingTolerance(float NewTolerance);

	/**
	* Checks if a biased die data is valid and ready to be used
	*
	* @param	BiasedDieData	The die data to check.
	* @return	Whether the die data is valid and ready to be used
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Is Die Data Valid", Keywords = "valid die data"), Category = "Biased")
	static bool IsDieDataValid(const FBiasedDieData &BiasedDieData);

private:
	
	static int32 InternalRollBiasedDice(const FBiasedDieData &BiasedDieData, int32 RandIndex, float RandRoll);

	//Tolerance we use to check for floating point errors
	static float FLOATING_POINT_TOLERANCE;
	
	//Constant value for no alias
	static const int32 ALIAS_NONE;

	//Constant value for invalid die roll
	static const int32 INVALID_ROLL;
};
